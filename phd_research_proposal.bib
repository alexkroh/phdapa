@inproceedings{aud_prefetch,
 author = {Garside, Jamie and Audsley, Neil C.},
 title = {WCET Preserving Hardware Prefetch for Many-Core Real-Time Systems},
 booktitle = {Proceedings of the 22Nd International Conference on Real-Time Networks and Systems},
 series = {RTNS '14},
 year = {2014},
 isbn = {978-1-4503-2727-5},
 location = {Versaille, France},
 pages = {193:193--193:202},
 articleno = {193},
 numpages = {10},
 url = {http://doi.acm.org/10.1145/2659787.2659824},
 doi = {10.1145/2659787.2659824},
 acmid = {2659824},
 publisher = {ACM},
 address = {New York, NY, USA},
} 

@article{Luppold,
 author = {Luppold, Arno and Menhorn, Benjamin and Falk, Heiko and Slomka, Frank},
 title = {A New Concept for System-level Design of Runtime Reconfigurable Real-time Systems},
 journal = {SIGBED Rev.},
 issue_date = {December 2013},
 volume = {10},
 number = {4},
 month = dec,
 year = {2013},
 issn = {1551-3688},
 pages = {57--60},
 numpages = {4},
 url = {http://doi.acm.org/10.1145/2583687.2583701},
 doi = {10.1145/2583687.2583701},
 acmid = {2583701},
 publisher = {ACM},
 address = {New York, NY, USA},
}

@INPROCEEDINGS{aud_hardimp, 
author={Ward, M. and Audsley, N.C.}, 
booktitle={Real-Time and Embedded Technology and Applications Symposium, 2002. Proceedings. Eighth IEEE}, 
title={Hardware implementation of programming languages for real-time}, 
year={2002}, 
month={}, 
pages={276-285}, 
abstract={Real-Time Systems place large demands on the languages used to implement them. The current, processor based implementation methods do not allow accurate timing analysis due to the complexity of modern processors. FPGAs provide a means to implement a real-time system in a way that allows accurate timing analysis. Existing implementations of programming languages in hardware do not support the needs of a real time system. This paper presents a hardware implementation of SPARK Ada that allows accurate timing analysis.}, 
keywords={Ada;computational complexity;real-time systems;FPGAs;SPARK Ada;hardware implementation;processor based implementation methods;programming languages;real time systems;timing analysis;Books;Computer languages;Field programmable gate arrays;Hardware;Interference;Predictive models;Processor scheduling;Real time systems;Sparks;Timing}, 
doi={10.1109/RTTAS.2002.1137403}, 
ISSN={1545-3421},}

@inproceedings{aud_ada,
 author = {Ward, M. and Audsley, N. C.},
 title = {Hardware Compilation of Sequential Ada},
 booktitle = {Proceedings of the 2001 International Conference on Compilers, Architecture, and Synthesis for Embedded Systems},
 series = {CASES '01},
 year = {2001},
 isbn = {1-58113-399-5},
 location = {Atlanta, Georgia, USA},
 pages = {99--107},
 numpages = {9},
 url = {http://doi.acm.org/10.1145/502217.502233},
 doi = {10.1145/502217.502233},
 acmid = {502233},
 publisher = {ACM},
 address = {New York, NY, USA},
} 

@ARTICLE{warp,
author={Vahid, F. and Stitt, G. and Lysecky, R.}, 
journal={Computer}, 
title={Warp Processing: Dynamic Translation of Binaries to FPGA Circuits}, 
year={2008}, 
month={July}, 
volume={41}, 
number={7}, 
pages={40-46}, 
abstract={Warp processing dynamically and transparently transforms an executing microprocessor's binary kernels into customized field-programmable gate array (FPGA) circuits, commonly resulting in 2X to 100X speedup over executing on microprocessors. A new architecture and set of dynamic CAD tools demonstrate warp processing's potential.}, 
keywords={Circuit synthesis;Clocks;Field programmable gate arrays;Hardware;Kernel;Logic arrays;Logic devices;Microprocessors;Programmable logic arrays;Yarn;FPGA;dynamic synthesis;embedded systems;just-in-time compilation;reconfigurable computing;warp processing}, 
doi={10.1109/MC.2008.240}, 
ISSN={0018-9162},}

@INPROCEEDINGS{micro_hyp,
author={Khoa Dang Pham and Jain, A.K. and Jin Cui and Fahmy, S.A. and Maskell, D.L.}, 
booktitle={Application-Specific Systems, Architectures and Processors (ASAP), 2013 IEEE 24th International Conference on}, 
title={Microkernel hypervisor for a hybrid ARM-FPGA platform}, 
year={2013}, 
month={June}, 
pages={219-226}, 
abstract={Reconfigurable architectures have found use in a wide range of application domains, but mostly as static accelerators for computationally intensive functions. Commodity computing adoption has not taken off due primarily to design complexity challenges. Yet reconfigurable architectures offer significant advantages in terms of sharing hardware between distinct isolated tasks, under tight time constraints. Trends towards amalgamation of computing resources in the automotive and aviation domains have so far been limited to non-critical systems, because processor approaches suffer from a lack of predictability and isolation. Hybrid reconfigurable platforms may provide a promising solution to this, by allowing physically isolated access to hardware resources, and support for computationally demanding applications, but with improved programmability and management. We propose virtualized execution and management of software and hardware tasks using a microkernel-based hypervisor running on a commercial hybrid computing platform (the Xilinx Zynq). We demonstrate a framework based on the CODEZERO hypervisor, which has been modified to leverage the capabilities of the FPGA fabric. It supports discrete hardware accelerators, dynamically reconfigurable regions, and regions of virtual fabric, allowing for application isolation and simpler use of hardware resources. A case study demonstrating multiple independent (and isolated) software and hardware tasks is presented.}, 
keywords={electronic engineering computing;field programmable gate arrays;operating system kernels;reconfigurable architectures;software management;virtualisation;CODEZERO hypervisor;FPGA fabric;Xilinx Zynq;amalgamation;automotive domain;aviation domain;commodity computing adoption;complexity challenges;computationally intensive functions;computing resources;discrete hardware accelerators;distinct isolated tasks;hardware resources;hardware tasks;hybrid ARM-FPGA platform;hybrid computing platform;hybrid reconfigurable platforms;isolation;microkernel hypervisor;microkernel-based hypervisor;noncritical systems;predictability;programmability;reconfigurable architectures;reconfigurable regions;software management;static accelerators;time constraints;virtual fabric;virtualized execution;Computer architecture;Context;Fabrics;Field programmable gate arrays;Hardware;Virtual machine monitors;Virtualization;Reconfigurable systems;field programmable gate arrays;hypervisor;virtualization}, 
doi={10.1109/ASAP.2013.6567578}, 
ISSN={2160-0511},}


